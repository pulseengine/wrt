# WRT - wrt-platform
# Module: Cargo Configuration
# SW-REQ-ID: REQ_PLATFORM_001
#
# Copyright (c) 2025 Ralf Anton Beier
# Licensed under the MIT license.
# SPDX-License-Identifier: MIT

[package]
name = "wrt-platform"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
description = "Platform Abstraction Layer (Memory, Synchronization) for WRT."
readme = "README.md"
# repository = "..." # Add repository URL later
# homepage = "..." # Add homepage URL later
# documentation = "..." # Add docs URL later
keywords = ["webassembly", "wasm", "runtime", "platform", "memory", "sync"]
categories = ["wasm", "os"]

[lints]
workspace = true

[dependencies]
wrt-error = { workspace = true } # Assuming wrt-error is in workspace.dependencies
wrt-sync = { workspace = true } # Add wrt-sync for synchronization primitives
wrt-panic = { workspace = true, optional = true } # Dedicated panic handler
# wrt-format = { workspace = true, optional = true } # For AST allocator - temporarily disabled to fix cyclic dependency
# wrt-foundation = { workspace = true, optional = true } # For bounded collections - temporarily disabled to fix cyclic dependency
# libc dependency removed - using direct syscalls instead

[dev-dependencies]
criterion = { version = "0.6", features = ["html_reports"] }

[features]
default = [] # No panic handler by default - libraries should provide their own
# Binary choice: std OR no_std (no alloc middle ground)

# Binary choice: std OR no_std (no alloc middle ground)
std = ["wrt-error/std", "wrt-sync/std"]
no_std = []

# All memory allocation uses NoStdProvider pattern

# Feature for threading support (requires std)
threading = ["std"] # , "wrt-foundation"]

# Test utilities (for testing random number generation, etc.)
test-utils = []

# libc dependency removed - using direct syscalls instead

# Platform-specific features
platform-macos = [] # platform-macos no longer activates alloc by default
platform-linux = [] # Linux support with direct syscalls
linux-mte = [] # Enhanced ARM64 MTE support for Linux
platform-qnx = [] # QNX Neutrino RTOS support
platform-tock = [] # Tock OS support
platform-zephyr = [] # Zephyr RTOS support
platform-vxworks = [] # VxWorks RTOS support (LKM and RTP)
# platform-baremetal = []
# arm-hardening = [] # If any platform code depends on this
helper-mode = [] # Added for C-ABI runtime
enable-panic-handler = ["dep:wrt-panic", "wrt-panic/default-panic-handler"] # Enable basic panic handler for standalone no_std builds
dev-panic-handler = ["dep:wrt-panic", "wrt-panic/dev", "wrt-panic/default-panic-handler"] # Development panic handler with debugging
asil-b-panic-handler = ["dep:wrt-panic", "wrt-panic/asil-b", "wrt-panic/default-panic-handler"] # ASIL-B compliant panic handler
asil-d-panic-handler = ["dep:wrt-panic", "wrt-panic/asil-d", "wrt-panic/default-panic-handler"] # ASIL-D compliant panic handler
# Core allocation strategies (aligned with wrt-foundation)
dynamic-allocation = []
static-allocation = []
verified-static-allocation = ["static-allocation"]

# Capability features
compile-time-capacity-limits = []
runtime-bounds-checking = []
formal-verification-required = ["kani"]

# Platform-specific safety features
platform-sync = []  # Master feature for platform synchronization
deterministic-timing = []
memory-protection = []
isolation-enforcement = []

# ASIL Safety Levels
qm = ["dynamic-allocation"]
asil-a = ["runtime-bounds-checking"]
asil-b = ["asil-a", "compile-time-capacity-limits", "platform-sync"]
asil-c = ["asil-b", "static-allocation", "deterministic-timing"]
asil-d = ["asil-c", "verified-static-allocation", "formal-verification-required", "memory-protection", "isolation-enforcement"]

# Convenience bundles
bounded-collections = [
    "compile-time-capacity-limits",
    "runtime-bounds-checking"
]

static-memory-safety = [
    "static-allocation",
    "memory-protection"
]

maximum-safety = [
    "verified-static-allocation",
    "formal-verification-required",
    "isolation-enforcement"
]

# Legacy compatibility
safety-asil-b = ["asil-b"]
safety-asil-c = ["asil-c"]
safety-asil-d = ["asil-d"]
kani = ["formal-verification-required"]


[lib]
crate-type = ["rlib"] # staticlib removed - was causing test linking issues. Re-add via separate target if C ABI needed

[[bench]]
name = "cfi_performance_benchmarks"
harness = false 