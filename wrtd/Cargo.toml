[package]
name = "wrtd"
version.workspace = true
edition.workspace = true
license = { workspace = true }
description = "WebAssembly Runtime Daemon - minimal optimized binary for different environments"
repository = "https://github.com/pulseengine/wrt"
readme = "README.md"
keywords = ["wasm", "webassembly", "daemon", "runtime", "host"]
categories = ["wasm", "command-line-utilities", "network-programming"]

# Single binary with runtime mode detection
[[bin]]
name = "wrtd"
path = "src/main.rs"

[dependencies]
# Core WRT dependencies (minimal internal-only dependencies)
wrt-error = { workspace = true, default-features = false }
wrt-logging = { workspace = true, default-features = false }
wrt-foundation = { workspace = true, default-features = false, optional = true }
# Centralized panic handler for safety-critical operation
wrt-panic = { workspace = true, default-features = false }

# Only add core WRT libraries when actually needed
wrt = { workspace = true, default-features = false, optional = true }
wrt-runtime = { workspace = true, default-features = false, optional = true }
wrt-platform = { workspace = true, default-features = false, optional = true }
wrt-host = { workspace = true, default-features = false, optional = true }
wrt-component = { workspace = true, default-features = false, optional = true }
wrt-decoder = { workspace = true, default-features = false, optional = true }

# WASI support
wrt-wasi = { path = "../wrt-wasi", default-features = false, optional = true }

# Global allocator for no_std mode
linked_list_allocator = { version = "0.10", optional = true }

# No external dependencies - use internal capabilities only

[features]
default = ["std", "wrt-execution", "component-model"]

# Binary choice: std OR no_std (no alloc middle ground)
std = [
    "wrt-error/std",
    "wrt-logging/std",
    "dep:wrt-foundation"
]

# Enable actual WRT execution (vs demo mode) - without wrt-component for now
wrt-execution = [
    "std",
    "dep:wrt-runtime",
    "dep:wrt-platform",
    "dep:wrt-host",
    "wrt-runtime/std",
    "wrt-platform/std",
    "wrt-host/std"
]

# WASI support features
wasi = ["wrt-execution", "dep:wrt-wasi", "wrt-wasi/preview2"]
wasi-filesystem = ["wasi", "wrt-wasi/wasi-filesystem"]
wasi-cli = ["wasi", "wrt-wasi/wasi-cli"]
wasi-clocks = ["wasi", "wrt-wasi/wasi-clocks"]
wasi-io = ["wasi", "wrt-wasi/wasi-io"]
wasi-random = ["wasi", "wrt-wasi/wasi-random"]
wasi-nn = ["wasi", "wrt-wasi/wasi-nn"]

# Component model support (disabled - wrt-component has compilation issues)
component-model = ["wrt-execution"]

# Safety level presets using capability-based features
# wrtd with wrt-wasi supports QM to ASIL-B (daemon/service use cases)
qm = ["wrt-foundation/dynamic-allocation", "wrt-logging/qm"]
asil-a = ["wrt-foundation/bounded-collections", "wrt-logging/asil-a"]
asil-b = ["wrt-foundation/bounded-collections", "wrt-logging/asil-b"]
# Note: ASIL-C and ASIL-D are not supported for wrtd+wrt-wasi configuration
# Use the core 'wrt' crate for ASIL-C/D applications

# Legacy compatibility features
safe-memory = ["asil-b"]
safety-asil-b = ["asil-b"]

# Panic handler for no_std builds - ASIL-B compliant (highest level for wrtd)
enable-panic-handler = ["wrt-panic/default-panic-handler", "wrt-panic/asil-b", "dep:linked_list_allocator"]

# Development panic handler (enhanced debugging)
dev-panic = ["wrt-panic/default-panic-handler", "wrt-panic/dev", "dep:linked_list_allocator"]


[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(test)'] }
missing_docs = "deny"
unsafe_code = "deny"

[lints.clippy]
# Rule 1: Language subset
inline_asm_x86_att_syntax = "warn"
transmute_ptr_to_ref = "deny"
# type_id lint removed - not a valid clippy lint
dyn_trait = "warn"
float_arithmetic = "warn"
# Rule 2: Unsafe usage
ptr_offset_with_cast = "warn"
# Rule 3: Error handling & panics
unwrap_used = "warn"
panic = "warn" # Also covers Rule 4
result_unit_err = "warn"
let_underscore_drop = "warn"
must_use_candidate = "warn"
must_use_unit = "warn"
# Rule 4: Control-flow soundness
match_wildcard_for_single_variants = "warn"
never_loop = "warn"
unreachable = "warn" # Also related to Rule 4
# Rule 5: Memory & concurrency safety
# static_mut_reference renamed to static_mut_refs in newer Rust versions
arc_mutate = "deny"
# Rule 8: Static analysis gates (CI)
pedantic = "warn"
# Rule 9: Documentation
debug_assert_with_mut_call = "warn"